name: Deploy

on:
  push:
    branches: [main]

jobs:
  # ============================================
  # 변경 감지 (모든 job이 의존)
  # ============================================
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      llm_service: ${{ steps.filter.outputs.llm_service }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'server/backend/**'
            llm_service:
              - 'server/llm_service/**'

  # ============================================
  # Frontend 배포
  # ============================================
  deploy-frontend:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Create .env file
        working-directory: ./frontend
        run: echo "${{ secrets.FRONTEND_ENV_FILE }}" > .env.local
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Build
        working-directory: ./frontend
        run: npm run build
        continue-on-error: false
      
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: live
          projectId: fsfproject-fd2e6
          entryPoint: ./frontend

  # ============================================
  # Backend 배포
  # ============================================
  deploy-backend:
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
      
      - name: Build and Push Docker Image
        working-directory: ./server
        run: |
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/fsf/fsf-server:latest .
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/fsf/fsf-server:latest
      
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy fsf-server \
            --image ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/fsf/fsf-server:latest \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --set-env-vars="ENV=production" \
            --memory=512Mi \
            --timeout=300s

  # ============================================
  # LLM Service 배포 (나중에 활성화)
  # ============================================
  # deploy-llm-service:
  #   needs: changes
  #   if: needs.changes.outputs.llm_service == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: ${{ secrets.GCP_SA_KEY }}
  #     
  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v2
  #     
  #     - name: Configure Docker for Artifact Registry
  #       run: |
  #         gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
  #     
  #     - name: Build and Push Docker Image
  #       working-directory: ./server/llm_service
  #       run: |
  #         docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/fsf/llm-service:latest .
  #         docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/fsf/llm-service:latest
  #     
  #     - name: Deploy to Cloud Run
  #       run: |
  #         gcloud run deploy fsf-llm-service \
  #           --image ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/fsf/llm-service:latest \
  #           --platform managed \
  #           --region ${{ secrets.GCP_REGION }} \
  #           --allow-unauthenticated \
  #           --memory 2Gi \
  #           --cpu 2